import streamlit as st

from views.page_urls import page_urls

page_urls(__file__)


abstract_ = """
### 読みやすいコードの書き方
以下のようなケースを想定すると、見通しのよいコードにすることが重要です。
- 分担する
- 引継ぐ
- 自分の書いたコードを2週間後に見る

ここでは、アプリを1から作成する際に、コードの可読性を上げるコツを紹介します。  
なお、この方法は動くプロトタイプの制作でも有効です。  
（※もっと良い書き方があればこっそり教えてください！）
"""

step = [
    """
### UI機能の定義
まず、実装すべきUI機能をメインプログラム内で一つ一つを関数として定義していきます。  
今回の例であれば、あるデータを対象とした以下の機能を定義します。
1. 表形式で表示する: `disp_data()`
1. 追加する: `add_data()`
1. 編集する: `edit_and_calc()`
1. 何らかの処理を実行する: `edit_and_calc()`
    - 書いてて気づいたのですが編集と分けるべきだったかもしれません
1. 処理結果をグラフ化する: `check_metrics()`
1. 検索(フィルタリング)する: `search()`

メインプログラム内である程度表示の確認ができれば、以下の作業を行います。
1. 表示エリアを引数にする
    - 注意点として、すべての `st.` を書き換えればいいわけではなく、あくまで表示領域を規定する部分のみを書き換えます
        - `st.` のままにする例：`edit_and_calc.py` のダイアログボックス
1. 別のpyファイルとして切り出す
    - 各ファイルで必要なライブラリをインポートするように、コードを書き換えてください
        - `st.` を含まないファイルでは、Streamlitの機能を使っていたとしてもStreamlitのインポートは不要です
    - メインプログラムに分離させたファイルの関数をインポートするように、コードを書き換えてください

    """,
    """
### レイアウトの定義
次に、レイアウトをコードに落とし込みます。

🎈 レイアウトの組み替えは、該当する関数の実行場所と引数を変えるだけで可能です。

    """,
    """
### 内部処理機能の定義
最後に、描画/表示以外の処理（内部処理等）を切り出します。
- ただし、1行のコードを無理に切り出す必要はありません。
- ファイル分割することで認知負荷は多少上がるため、不要な分割は避けるべきです。

今回の例はワイヤーフレームであり内部処理は以下のみです。
1. データを読み込む: `pd.read_csv()`（外部ライブラリで定義済み）

    """,
]


tabs = st.tabs(
    [
        "このセクションの概要　　　",
        "UI機能の定義　　　",
        "レイアウトの定義　　　",
        "内部処理機能の定義　　　",
    ]
)

with tabs[0]:
    abstract_
with tabs[1]:
    step[0]
with tabs[2]:
    step[1]
with tabs[3]:
    step[2]
