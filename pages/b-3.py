import streamlit as st

from views.page_urls import page_urls

page_urls(__file__)


abstract_ = """
### ファイルの分割
以下のようなケースを想定すると、見通しの用コードにすることが重要です。
- 分担する
- 引継ぐ
- 自分の書いたコードを2週間後に見る

ここでは、見通しの良いコードにするための3ステップを紹介します。  
なお、この方法は動くプロトタイプ制作でも有効です。  
（※もっと良い方法があればこっそり教えてください！）
"""

step = [
    """
### 機能の定義
まず、必要な機能を一つ一つを関数に分割しながら書いていきます。
    """,
    """
### 内部処理の分離
次に、描画/表示以外の処理（内部処理等）を切り出します。
- ただし、1行のコードを無理に切り出す必要はありません。
- ファイル分割することで認知負荷は多少上がるため、不要な分割は避けるべきです。

...といっても、今回の例はワイヤーフレームであり内部処理をほとんど持たないので、この工程を経ても変化なしです。

    """,
    """
### レイアウトのコード化
最後に、レイアウトをコードに落とし込みます。

##### レイアウトを組み換え
レイアウトの組み替えは、該当する関数の実行場所と引数を変えるだけで可能です。

    """,
]


tabs = st.tabs(
    [
        "このセクションの概要　　　",
        "機能の定義　　　",
        "内部処理の分離　　　",
        "レイアウトのコード化　　　",
    ]
)

with tabs[0]:
    abstract_
with tabs[1]:
    step[0]
with tabs[2]:
    step[1]
with tabs[3]:
    step[2]
